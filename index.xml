<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kinnylee</title>
    <link>https://kinnylee.github.io/</link>
    <description>Recent content on kinnylee</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020; all rights reserved.</copyright>
    <lastBuildDate>Mon, 10 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kinnylee.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dmp文件读取（一）</title>
      <link>https://kinnylee.github.io/post/breakpad/breekpad-dmp-01/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/breekpad-dmp-01/</guid>
      <description>dmp文件解析 dmp读取源码分析（一） 1. 入口文件： src/processor/minidump_stackwalk.cc 文件 main函数
1int main(int argc, char **argv) { 2 ... 3 // 解析参数 4 ... 5 // dmp分析的核心函数 6 PrintMinidumpProcess(...) 7 ... 8} 2. 总体流程： Minidump对象用于保存dmp文件流内容，核心代码
1PrintMinidumpProcess(...) { 2 ... 3 // 第一步：读取dmp文件内容 4 Minidump dump(minidump_file); 5 if (!dump.Read()) { 6 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Minidump &amp;#34; &amp;lt;&amp;lt; dump.path() &amp;lt;&amp;lt; &amp;#34; could not be read&amp;#34;; 7 return false; 8 } 9 10 // 第二步：开始分析dmp 11 minidump_processor.Process(&amp;amp;dump, &amp;amp;process_state) 12 13 // 第三步：打印分析结果 14 PrintProcessState(.</description>
    </item>
    
    <item>
      <title>dmp文件读取（二）</title>
      <link>https://kinnylee.github.io/post/breakpad/breekpad-dmp-02/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/breekpad-dmp-02/</guid>
      <description>dmp文件解析 dmp文件读取（二） 前面的章节一直提到，dmp中有很多中不同的stream，分别代表不同维度的信息，比如：操作系统信息、线程信息、异常信息、模块信息等。
breakpad中的流的表示 枚举类 MDStreamType 表示所有的流，源码位置：src/google_breakpad/common/minidump_format.h
1typedef enum { 2 MD_UNUSED_STREAM = 0, 3 MD_RESERVED_STREAM_0 = 1, 4 MD_RESERVED_STREAM_1 = 2, 5 MD_THREAD_LIST_STREAM = 3, /* MDRawThreadList */ 6 MD_MODULE_LIST_STREAM = 4, /* MDRawModuleList */ 7 MD_MEMORY_LIST_STREAM = 5, /* MDRawMemoryList */ 8 MD_EXCEPTION_STREAM = 6, /* MDRawExceptionStream */ 9 MD_SYSTEM_INFO_STREAM = 7, /* MDRawSystemInfo */ 10 MD_THREAD_EX_LIST_STREAM = 8, 11 MD_MEMORY_64_LIST_STREAM = 9, 12 MD_COMMENT_STREAM_A = 10, 13 MD_COMMENT_STREAM_W = 11, 14 MD_HANDLE_DATA_STREAM = 12, 15 MD_FUNCTION_TABLE_STREAM = 13, 16 MD_UNLOADED_MODULE_LIST_STREAM = 14, 17 MD_MISC_INFO_STREAM = 15, /* MDRawMiscInfo */ 18 MD_MEMORY_INFO_LIST_STREAM = 16, /* MDRawMemoryInfoList */ 19 MD_THREAD_INFO_LIST_STREAM = 17, 20 MD_HANDLE_OPERATION_LIST_STREAM = 18, 21 MD_TOKEN_STREAM = 19, 22 MD_JAVASCRIPT_DATA_STREAM = 20, 23 MD_SYSTEM_MEMORY_INFO_STREAM = 21, 24 MD_PROCESS_VM_COUNTERS_STREAM = 22, 25 MD_LAST_RESERVED_STREAM = 0x0000ffff, 26 27 /* Breakpad extension types.</description>
    </item>
    
    <item>
      <title>jvm</title>
      <link>https://kinnylee.github.io/post/java/jvm/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/java/jvm/</guid>
      <description>jvm原理</description>
    </item>
    
    <item>
      <title>go入门</title>
      <link>https://kinnylee.github.io/post/go/go%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/go/go%E5%85%A5%E9%97%A8/</guid>
      <description>go语言入门介绍
安装 基本语法 </description>
    </item>
    
    <item>
      <title>Dmp读取（一）</title>
      <link>https://kinnylee.github.io/posts/dmp-read-1/</link>
      <pubDate>Sat, 11 Apr 2020 12:10:58 +0800</pubDate>
      
      <guid>https://kinnylee.github.io/posts/dmp-read-1/</guid>
      <description>dmp读取源码分析（一）  dmp读取核心源码
 1. 入口文件： src/processor/minidump_stackwalk.cc 文件 main函数
1int main(int argc, char **argv) { 2 ... 3 // 解析参数 4 ... 5 // dmp分析的核心函数 6 PrintMinidumpProcess(...) 7 ... 8} 2. 总体流程： Minidump对象用于保存dmp文件流内容，核心代码
1PrintMinidumpProcess(...) { 2 ... 3 // 第一步：读取dmp文件内容 4 Minidump dump(minidump_file); 5 if (!dump.Read()) { 6 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Minidump &amp;#34; &amp;lt;&amp;lt; dump.path() &amp;lt;&amp;lt; &amp;#34; could not be read&amp;#34;; 7 return false; 8 } 9 10 // 第二步：开始分析dmp 11 minidump_processor.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kinnylee.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://kinnylee.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/about/</guid>
      <description>  2014年毕业于中国地质大学（武汉），计算机科学与技术专业
  毕业至今，一直就职于国内某软件公司，坐标北京
  写过C++、Java、Python、Go
  喜欢研究源码
  篮球狂热分子，每周至少打3次
  喜欢研究新技术，包括
 机器学习 k8s go 云原生    项目经验
     时间 产品名称 产品介绍 技术栈 个人职责     2019-04 ~ 至今 房角石系统 公司后台服务产品私有化部署 java、python、vue 1. 负责部署引擎的开发   2017-10 ~ 2019-03 异常捕获系统 公司端产品崩溃情况收集、分析、统计 java、c++、es、mongodb 1. 负责google breakpad分析工具的二次开发   2016-11 ~ 2017-09 斑马进度软件 进度计划编制软件 MFC 负责斑马软件系统开发   2014-07 ~ 2016~10 土建算量软件 建筑工程算量软件 Qt 负责计算模块的开发    </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码分析 on kinnylee</title>
    <link>https://kinnylee.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 源码分析 on kinnylee</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020; all rights reserved.</copyright>
    <lastBuildDate>Thu, 27 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kinnylee.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go-select源码分析</title>
      <link>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go-select%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go-select%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>select简介 select使用 下面是select的最简单的用法：
1 select源码入口 select在源码中也没有对应的实现，而是通过编译器将相关符号翻译为底层实现。 使用以下命令将go源码翻译为汇编
1go tool compile -N -l -S main.go&amp;gt;hello.s 查看部分带有CALL指令的核心内容如下：
10x0102 00258 (main.go:64) CALL runtime.selectgo(SB) 可以猜测对应关系：
 select语句对应：runtime.selectgo函数  相关源码只需要到runtime包下，全局搜索就可以找到在文件runtime/chan.go下
1func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {} 源码分析 case数据结构 1type scase struct { 2 c *hchan // chan 3 elem unsafe.Pointer // data element 4 kind uint16 5 pc uintptr // race pc (for race detector / msan) 6 releasetime int64 7} </description>
    </item>
    
    <item>
      <title>go-channel源码分析</title>
      <link>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go-channel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go-channel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>go-channel源码分析 channel简介  channel是一个类型管道，通过它可以在groutine之间发送和接收消息 go语言层面提供的groutine之间的通讯方式  channel使用 下面是channel的最简单的用法：
1package main 2import &amp;#34;fmt&amp;#34; 3 4func main() { 5 c := make(chan int) 6 go func() { 7 // 发送数据到channel 8 c &amp;lt;- 1 9 }() 10 // 从channel取出数据 11 x := &amp;lt;- c 12 close(c) 13 fmt.Println(x) 14} channel源码入口 channel使用的make、&amp;lt;- 等符号，在源码中没有对应的实现，而是通过编译器将相关符号翻译为底层实现。 使用以下命令将go源码翻译为汇编
1go tool compile -N -l -S main.go&amp;gt;hello.s 查看部分带有CALL指令的核心内容如下：
10x0043 00067 (main.go:42) CALL runtime.makechan(SB) 20x006a 00106 (main.go:44) CALL runtime.newproc(SB) 30x008b 00139 (main.</description>
    </item>
    
    <item>
      <title>go协程原理</title>
      <link>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/go/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/go%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</guid>
      <description>协程原理 并发编程模型  从内存的角度看，并行计算只有两种：共享内存、消息通讯。 目的是解决多线程的数据一致性  CSP模型  go语言的并发特性是由1978年发布的CSP理论演化而来，另外一个知名的CSP实现语言是Eralng，大名鼎鼎的Rabbitmq就是用erlang实现的。 CSP是Communicating Sequential Processes(顺序通信进程)的缩写 CSP模型用于描述两个独立的并发实体通过共享的通讯 channel(管道)进行通信的并发模型。  go对CSP模型的实现  go底层使用goroutine做为并发实体，goroutine非常轻量级可以创建几十万个实体。 实体间通过 channel 继续匿名消息传递使之解耦，在语言层面实现了自动调度，这样屏蔽了很多内部细节 对外提供简单的语法关键字，大大简化了并发编程的思维转换和管理线程的复杂性。 通过GMP调度模型实现语言层面的调度  并发调度原理 go语言的线程MPG调度模型
M：machine，一个M直接关联一个内核线程 P：processor，代表M所需的上下文环境，也是处理用户级代码逻辑的处理器 G：groutine，协程，本质上是一种轻量级的线程
 一个M对应一个内核线程，也会连接一个上下文P 一个上下文P，相当于一个处理器。 p的数量是在启动时被设置为环境变量GOMAXPROCS，意味着运行的线程数量是固定的 一个上下文连接一个或多个groutine p正在执行的Groutine为蓝色的，处于待执行的Groutine为灰色（保存在一个队列中）  G 数据结构  G对应Groutine  1// 源码位置：src/runtime/runtime2.go 2type g struct { 3 // 栈变量，保存运行时的堆栈内存信息 4 // 内部包含两个指针：lo和hi，分别指向栈的上下界 5 stack stack // offset known to runtime/cgo 6 stackguard0 uintptr // offset known to liblink 7 stackguard1 uintptr // offset known to liblink 8 .</description>
    </item>
    
    <item>
      <title>dmp文件分析（四）- 调用栈分析</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%9B%9B-%E8%B0%83%E7%94%A8%E6%A0%88/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%9B%9B-%E8%B0%83%E7%94%A8%E6%A0%88/</guid>
      <description>dmp文件分析（四）- 调用栈分析 前面的章节我们介绍过，分析dmp的一个调用栈的过程，以及获取上一个栈帧的公式。今天介绍这个公式在breakpad中的源码调用。调用栈分析有三种途径，里面很多细节还不是完全理解，只是大概罗列一下代码的框架
获取调用者的栈帧 前面介绍过Stackwalker方法是基类，每种不同的cpu架构都有自己的实现类，都需要重写几个方法，其中很重要的一个是GetCallerFrame方法，用于获取调用栈的上一个栈帧
 caller: 调用者（父函数）; callee：被调用者（子函数）
 这里以常用的amd64架构cpu介绍源码实现。实现类为 StackwalkerAMD64
1StackFrame* StackwalkerAMD64::GetCallerFrame(const CallStack* stack, 2 bool stack_scan_allowed) { 3 ... 4 // 先获取调用栈所有的栈帧 5 const vector&amp;lt;StackFrame*&amp;gt; &amp;amp;frames = *stack-&amp;gt;frames(); 6 // 取出最后一个栈帧 7 StackFrameAMD64* last_frame = static_cast&amp;lt;StackFrameAMD64*&amp;gt;(frames.back()); 8 scoped_ptr&amp;lt;StackFrameAMD64&amp;gt; new_frame; 9 10 // 如果symbol中有CFI信息，查找栈帧相关的CFI信息 11 scoped_ptr&amp;lt;CFIFrameInfo&amp;gt; cfi_frame_info( 12 frame_symbolizer_-&amp;gt;FindCFIFrameInfo(last_frame)); 13 if (cfi_frame_info.get()) 14 // 通过CFI信息获取上次调用函数的栈帧 15 new_frame.reset(GetCallerByCFIFrameInfo(frames, cfi_frame_info.get())); 16 17 // If CFI was not available or failed, try using frame pointer recovery.</description>
    </item>
    
    <item>
      <title>dmp文件分析（三）- 栈帧结构和原理</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%89-%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84%E5%92%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%89-%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84%E5%92%8C%E5%8E%9F%E7%90%86/</guid>
      <description>dmp文件分析（三）- 寄存器与栈帧结构 上一篇文件讲解了一个崩溃调用栈中第一个栈帧的分析过程：
 获取指令寄存器eip的地址，通过该地址去模块列表中匹配，找到符合的模块，确定崩溃在哪个模块了 通过模块信息，根据一定路径拼接规则去查找给定模块的符号文件是否存在 解析符号文件，并保存 将符号文件的内存地址和模块的内存地址做匹配，得到崩溃模块的源码信息  分析完一个栈帧后，会根据栈帧结构，查找上层调用函数的eip，继续分析下一个栈帧，再继续分析源码之前，先介绍一下栈帧结构和寄存器相关知识，breakpad中主要用到eip、ebp、esp
寄存器 寄存器是CPU内部用来存放数据的一些小型存储区域，包括通用寄存器、专用寄存器和控制寄存器。寄存器拥有非常高的读写速度，所以在寄存器之间的数据传送非常快。不同架构cpu的寄存器不一样，本文介绍32位cpu经典寄存器。包括：
 数据寄存器：4个：EAX，EBX，ECX，EDX 指令寄存器：1个：EIP 指针寄存器：2个：ESP、EBP 变址寄存器：2个：ESI、EDI 标志寄存器：1个：EFlags  数据寄存器   数据寄存器用于保存操作数和计算结果
  EAX、EBX、ECX、EDX为32位寄存器，对低16位数据的读取，不会影响高16位数据的读取
  低16位寄存器命名为：AX、BX、CX、DX
  低16位寄存器又可分割为8个独立的位寄存器，每个寄存器有自己独立的名字，可以独立存取
 AX：AH-AL BX：BH-BL CX：CH-CL DX：DH-DL    EAX：累加器，用于乘、除、输入、输出（赋值）等操作，使用频率很高
  EBX：基地址寄存器，经常当做返回值使用
  ECX：计数寄存器，用于控制循环次数
  EDX：数据寄存器，在乘、除运算时的作为默认操作数，也可用于io操作存储端口
  指针寄存器  主要用于访问堆栈内的存储单元 EBP：基指针寄存器，用它可直接存取堆栈中的数据 ESP：堆栈指针寄存器，只可以访问栈顶 breakpad中用到ebp和esp，根据栈帧结构做堆栈调用分析  指令寄存器  EIP，ip(Instruction Pointer):存放下次将要执行的指令在代码段的偏移量 breakpad中，前面我们多次提到，会以eip的地址做为分析的起始地址  变址寄存器  主要用于存放存储单元在段内的偏移量，目的：存储寻址 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便  标志寄存器 标志寄存器包括多个标志位：</description>
    </item>
    
    <item>
      <title>dmp文件分析（二）- symbol</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%BA%8C-symbol/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%BA%8C-symbol/</guid>
      <description>dmp文件分析（二）- symbol 上一篇回顾了dmp的解析，并介绍了dmp分析的入口，通过不同的cpu架构，构造Stackwalker的不同子类，并调用Walk方法分析调用栈，其中Walk方法中包含两步：
 读取寄存器中的eip，构造初始化栈帧 提取symbol信息，用于协助分析，使分析结果能准确到代码行数级别 根据eip，分析顶层栈调用情况 根据栈帧查找原理，获取caller（上层调用者）的栈帧信息，直到栈帧结束  第一步上一篇已经介绍过，这篇文章主要介绍内容包括：
 symbol是什么 symbol文件格式以及存储格式规范 如何通过寄存器eip，快速定位到哪个模块崩溃 如何通过某种查找规则，找到模块对应的symbol  Walk方法回顾 核心方法包括以下三步
 GetContextFrame：填充eip，构造顶层栈帧（上一篇已经介绍） FillSourceLineInfo：获取符号信息，协助准确定位崩溃代码行 GetCallerFrame：获取调用者的栈帧  1bool Stackwalker::Walk( 2 CallStack* stack, 3 vector&amp;lt;const CodeModule*&amp;gt;* modules_without_symbols, 4 vector&amp;lt;const CodeModule*&amp;gt;* modules_with_corrupt_symbols) { 5 ... 6 // 构造一个栈帧，并取出context中的寄存器的eip，并缓存下来 7 scoped_ptr&amp;lt;StackFrame&amp;gt; frame(GetContextFrame()); 8 9 // 这里是一个死循环，一直分析并提取堆栈，直到下一个栈帧为空 10 while (frame.get()) { 11 // 栈帧始终包含一个有效的调用栈信息，并设置指令地址 12 // 指令地址来自context中的eip，或者被调用者 13 14 // 提取symbol信息，协助分析 15 StackFrameSymbolizer::SymbolizerResult symbolizer_result = 16 frame_symbolizer_-&amp;gt;FillSourceLineInfo(modules_, unloaded_modules_, 17 system_info_, 18 // 添加分析完毕的栈帧信息到堆栈列表中 19 stack-&amp;gt;frames_.</description>
    </item>
    
    <item>
      <title>dmp文件分析（一）- 概述</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%80-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%80-%E6%A6%82%E8%BF%B0/</guid>
      <description>dmp文件分析（一） 前面的章节已经将dmp文件读取分析完成，读取过程将dmp中的信息加载到对象中，用于后续分析，这篇文章开始介绍分析流程。
dmp读取流程回顾 如下源码已经做了详细注释，总结如下：
 读取头文件中的文件创建时间 读取进程运行时长 读取cpu信息 读取操作系统信息 读取崩溃的线程id 读取崩溃原因 读取断言信息 读取模块信息，并拷贝一份，用于后续分析（分析时会修改原始数据） 读取内存信息 读取线程信息 for循环，依次分析每个线程的调用栈  分析调用栈需要的数据  操作系统信息 上下文信息 线程内存信息 模块列表 符号相关参数信息  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 4 // 读取dmp文件头 5 const MDRawHeader *header = dump-&amp;gt;header(); 6 // 取出创建的时间戳 7 process_state-&amp;gt;time_date_stamp_ = header-&amp;gt;time_date_stamp; 8 9 // 读取misc stream中的进程运行时长 10 bool has_process_create_time = 11 GetProcessCreateTime(dump, &amp;amp;process_state-&amp;gt;process_create_time_); 12 13 // 读取system stream中的cpu、处理器架构信息 14 bool has_cpu_info = GetCPUInfo(dump, &amp;amp;process_state-&amp;gt;system_info_); 15 // 读取system stream中的操作系统信息 16 bool has_os_info = GetOSInfo(dump, &amp;amp;process_state-&amp;gt;system_info_); 17 18 // 读取breakpad stream中的自定义崩溃信息 19 MinidumpBreakpadInfo *breakpad_info = dump-&amp;gt;GetBreakpadInfo(); 20 if (breakpad_info) { 21 // 如果breakpad中有崩溃线程id，以这个线程id为准 22 has_dump_thread = breakpad_info-&amp;gt;GetDumpThreadID(&amp;amp;dump_thread_id); 23 has_requesting_thread = 24 breakpad_info-&amp;gt;GetRequestingThreadID(&amp;amp;requesting_thread_id); 25 } 26 // 读取exception中的异常描述信息 27 MinidumpException *exception = dump-&amp;gt;GetException(); 28 if (exception) { 29 process_state-&amp;gt;crashed_ = true; 30 has_requesting_thread = exception-&amp;gt;GetThreadID(&amp;amp;requesting_thread_id); 31 // 获取进程崩溃原因 32 process_state-&amp;gt;crash_reason_ = GetCrashReason( 33 dump, &amp;amp;process_state-&amp;gt;crash_address_); 34 } 35 36 // 获取assert stream中的断言信息 37 process_state-&amp;gt;assertion_ = GetAssertion(dump); 38 // 获取module stream中的模块列表信息 39 MinidumpModuleList *module_list = dump-&amp;gt;GetModuleList(); 40 if (module_list) { 41 // 将模块信息拷贝一份，后面分析时使用拷贝的副本进行分析 42 // 原因是：后续在分析调用栈时，会动态的修改这个字段，不能在原有的字段上操作 43 process_state-&amp;gt;modules_ = module_list-&amp;gt;Copy(); 44 } 45 // 获取未加载的模块列表信息（这个模块跟module stream类似，没有专门介绍） 46 MinidumpUnloadedModuleList *unloaded_module_list = 47 dump-&amp;gt;GetUnloadedModuleList(); 48 // 获取 memory stream中的内存信息 49 MinidumpMemoryList *memory_list = dump-&amp;gt;GetMemoryList(); 50 // 获取 thread stream中的线程列表信息 51 MinidumpThreadList *threads = dump-&amp;gt;GetThreadList(); 52 53 // 遍历所有的线程 54 for (unsigned int thread_index = 0; 55 thread_index &amp;lt; thread_count; 56 ++thread_index) { 57 58 MinidumpThread *thread = threads-&amp;gt;GetThreadAtIndex(thread_index); 59 60 // breakpad中记录的线程，表示是崩溃线程，这个线程跳过分析 61 // 因为这个崩溃的线程的堆栈和上下文信息有可能被损坏了，分析它并不会给我们提供有用信息 62 if (has_dump_thread &amp;amp;&amp;amp; thread_id == dump_thread_id) { 63 continue; 64 } 65 66 // 获取线程的上下文信息 67 MinidumpContext *context = thread-&amp;gt;GetContext(); 68 69 if (has_requesting_thread &amp;amp;&amp;amp; thread_id == requesting_thread_id) { 70 // 如果找到两个崩溃线程，出错 71 if (found_requesting_thread) { 72 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Duplicate requesting thread: &amp;#34; &amp;lt;&amp;lt; thread_string; 73 return PROCESS_ERROR_DUPLICATE_REQUESTING_THREADS; 74 } 75 // 如果exception stream中有上下文信息，就用这个上下文信息代替线程本身的上下文信息 76 if (process_state-&amp;gt;crashed_) { 77 MinidumpContext *ctx = exception-&amp;gt;GetContext(); 78 context = ctx ?</description>
    </item>
    
    <item>
      <title>dmp文件读取（六）- Others</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%85%AD-others/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%85%AD-others/</guid>
      <description>dmp文件读取（六） dmp文件中包含各种stream，前面已经介绍完线程、模块、异常、内存这四种stream的读取，至此，核心的stream读取已经介绍完，本章介绍其他的stream读取，这些stream不是不重要，而是代码比较简单，这些stream包括：
 MD_SYSTEM_INFO_STREAM MD_MISC_INFO_STREAM MD_BREAKPAD_INFO_STREAM MD_ASSERTION_INFO_STREAM  MD_SYSTEM_INFO_STREAM  包含cpu架构 包含操作系统信息 MDRawSystemInfo  system stream 读取入口 1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 bool has_cpu_info = GetCPUInfo(dump, &amp;amp;process_state-&amp;gt;system_info_); 4} 5 6bool MinidumpProcessor::GetCPUInfo(Minidump *dump, SystemInfo *info) { 7 ... 8 MinidumpSystemInfo *system_info; 9 const MDRawSystemInfo *raw_system_info = GetSystemInfo(dump, &amp;amp;system_info); 10} 11 12static const MDRawSystemInfo* GetSystemInfo(Minidump *dump, 13 MinidumpSystemInfo **system_info) { 14 MinidumpSystemInfo *minidump_system_info = dump-&amp;gt;GetSystemInfo(); 15 if (!minidump_system_info) 16 return NULL; 17 18 if (system_info) 19 *system_info = minidump_system_info; 20 21 return minidump_system_info-&amp;gt;system_info(); 22} MinidumpSystemInfo  MinidumpSystemInfo类用来保存系统信息 核心数据结构是：MDRawSystemInfo stream type是MD_SYSTEM_INFO_STREAM  系统信息数据结构：MDRawSystemInfo MDRawSystemInfo结构体保存了系统核心信息，包括：</description>
    </item>
    
    <item>
      <title>dmp文件读取（五）- Memory</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%94-memory/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%94-memory/</guid>
      <description>dmp文件读取（五） dmp文件中包含各种stream，前面已经介绍完线程、模块、异常这三种stream的读取，本章介绍另外一个很重要的stream：memory stream
Memory Stream概述  Memory Stream记录了进程崩溃时的内存信息 dmp中memory列表的stream类型为MD_MEMORY_LIST_STREAM，枚举值是5 memory分为很多的区域（region），每个区域使用MinidumpMemoryRegion对象表示  Memory Stream读取入口  dump的GetMemoryList方法，获取dmp文件中的内存信息 读取的模块列表信息保存在MinidumpMemoryList中 所有内存信息会建立索引，保存在range_map_中 range_map_是一个范围map类型，breakpad中定义的，后续查询时，只要给定一个内存地址，能快速定位到属于哪个内存region  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 ... 4 // 内存信息读取入口 5 MinidumpMemoryList *memory_list = dump-&amp;gt;GetMemoryList(); 6 ... 7} MinidumpMemoryList 1class MinidumpMemoryList : public MinidumpStream { 2 public: 3 // Sequential access to memory regions. 4 MinidumpMemoryRegion* GetMemoryRegionAtIndex(unsigned int index); 5 6 // Random access to memory regions. Returns the region encompassing 7 // the address identified by address.</description>
    </item>
    
    <item>
      <title>dmp文件读取（四）- Exception</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%9B%9B-exception/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%9B%9B-exception/</guid>
      <description>dmp文件读取（四） 前面两篇文章，已经把分析dmp所需要的准备工作：线程信息、模块信息的读取都分析完了。今天该崩溃的主角出场：异常(Exception) Stream的读取
Exception Stream概述  Exception Stream记录了进程崩溃时，崩溃现场的基本信息 崩溃信息包括：  崩溃时的线程id 异常状态码 异常标识 异常的内存地址 寄存器信息 其他信息   以上信息都保存在MDRawExceptionStream中  Exception Stream读取入口  dump的GetException方法，获取dmp文件中的崩溃信息 读取的模块列表信息保存在MinidumpException中  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 ... 4 // 异常信息读取入口 5 MinidumpException *exception = dump-&amp;gt;GetException(); 6 ... 7} MinidumpException  Exception Stream的类型为MD_EXCEPTION_STREAM 存储在dmp文件中的exectpion信息，反序列化之后保存为MDRawExceptionStream对象  1class MinidumpException : public MinidumpStream { 2 public: 3 virtual ~MinidumpException(); 4 5 const MDRawExceptionStream* exception() const { 6 return valid_ ?</description>
    </item>
    
    <item>
      <title>动态链接库与静态链接库</title>
      <link>https://kinnylee.github.io/post/c&#43;&#43;/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/c&#43;&#43;/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</guid>
      <description>概述 静态链接库  windows: .lib文件 linux：.a文件  动态链接库  windows：.dll文件 linux：.so文件  </description>
    </item>
    
    <item>
      <title>dmp文件读取（三）- Moduel</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%89-moduel/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%89-moduel/</guid>
      <description>dmp文件读取（三） 第二章主要介绍了dmp中线程stream的读取，线程信息包括进程运行时的所有线程，每个线程包括线程id、优先级、调用栈、寄存器等上下文信息。这些信息是后面分析调用栈的核心参考。本节主要介绍模块stream信息。
module stream概述  module信息记录了应用程序（exe）在运行时，加载了哪些dll 每个dll相关的信息，在dmp中称为module dmp中module列表的stream类型为MD_MODULE_LIST_STREAM，枚举值是4 每个module使用MinidumpModule对象表示 每个module在内存中占用一段位置，dmp分析时，根据线程的崩溃地址，匹配响应的模块内存地址  module流读取入口  dump的GetModuleList方法，获取dmp文件中的模块列表 读取的模块列表信息保存在MinidumpModuleList中  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 4 ... 5 // 读取模块信息 6 MinidumpModuleList *module_list = dump-&amp;gt;GetModuleList(); 7 ... 8} MinidumpModuleList 1class MinidumpModuleList : public MinidumpStream, 2 public CodeModules { 3 public: 4 ... 5 private: 6 friend class Minidump; 7 8 // 存放所有的module列表 9 // 每个module使用MinidumpModule对象表示 10 typedef vector&amp;lt;MinidumpModule&amp;gt; MinidumpModules; 11 12 // module的stream类型为MD_MODULE_LIST_STREAM 13 static const uint32_t kStreamType = MD_MODULE_LIST_STREAM; 14 15 // 重新read方法，读取module信息 16 bool Read(uint32_t expected_size); 17 18 // 最大模块数1024 19 // The largest number of modules that will be read from a minidump.</description>
    </item>
    
    <item>
      <title>dmp文件读取（二）- Thread</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%8C-thread/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%8C-thread/</guid>
      <description>dmp文件解析 dmp文件读取（二） 前面的章节一直提到，dmp中有很多中不同的stream，分别代表不同维度的信息，比如：操作系统信息、线程信息、异常信息、模块信息等。
breakpad中的流的表示 枚举类 MDStreamType 表示所有的流，源码位置：src/google_breakpad/common/minidump_format.h
1typedef enum { 2 MD_UNUSED_STREAM = 0, 3 MD_RESERVED_STREAM_0 = 1, 4 MD_RESERVED_STREAM_1 = 2, 5 MD_THREAD_LIST_STREAM = 3, /* MDRawThreadList */ 6 MD_MODULE_LIST_STREAM = 4, /* MDRawModuleList */ 7 MD_MEMORY_LIST_STREAM = 5, /* MDRawMemoryList */ 8 MD_EXCEPTION_STREAM = 6, /* MDRawExceptionStream */ 9 MD_SYSTEM_INFO_STREAM = 7, /* MDRawSystemInfo */ 10 MD_THREAD_EX_LIST_STREAM = 8, 11 MD_MEMORY_64_LIST_STREAM = 9, 12 MD_COMMENT_STREAM_A = 10, 13 MD_COMMENT_STREAM_W = 11, 14 MD_HANDLE_DATA_STREAM = 12, 15 MD_FUNCTION_TABLE_STREAM = 13, 16 MD_UNLOADED_MODULE_LIST_STREAM = 14, 17 MD_MISC_INFO_STREAM = 15, /* MDRawMiscInfo */ 18 MD_MEMORY_INFO_LIST_STREAM = 16, /* MDRawMemoryInfoList */ 19 MD_THREAD_INFO_LIST_STREAM = 17, 20 MD_HANDLE_OPERATION_LIST_STREAM = 18, 21 MD_TOKEN_STREAM = 19, 22 MD_JAVASCRIPT_DATA_STREAM = 20, 23 MD_SYSTEM_MEMORY_INFO_STREAM = 21, 24 MD_PROCESS_VM_COUNTERS_STREAM = 22, 25 MD_LAST_RESERVED_STREAM = 0x0000ffff, 26 27 /* Breakpad extension types.</description>
    </item>
    
    <item>
      <title>dmp文件读取（一）- 概述</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%80-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%80-%E6%A6%82%E8%BF%B0/</guid>
      <description>dmp文件解析 dmp读取源码分析（一） 1. 入口文件： src/processor/minidump_stackwalk.cc 文件 main函数
1int main(int argc, char **argv) { 2 ... 3 // 解析参数 4 ... 5 // dmp分析的核心函数 6 PrintMinidumpProcess(...) 7 ... 8} 2. 总体流程： Minidump对象用于保存dmp文件流内容，核心代码
1PrintMinidumpProcess(...) { 2 ... 3 // 第一步：读取dmp文件内容 4 Minidump dump(minidump_file); 5 if (!dump.Read()) { 6 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Minidump &amp;#34; &amp;lt;&amp;lt; dump.path() &amp;lt;&amp;lt; &amp;#34; could not be read&amp;#34;; 7 return false; 8 } 9 10 // 第二步：开始分析dmp 11 minidump_processor.Process(&amp;amp;dump, &amp;amp;process_state) 12 13 // 第三步：打印分析结果 14 PrintProcessState(.</description>
    </item>
    
  </channel>
</rss>
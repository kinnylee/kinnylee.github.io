<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码分析 on kinnylee</title>
    <link>https://kinnylee.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 源码分析 on kinnylee</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020; all rights reserved.</copyright>
    <lastBuildDate>Mon, 10 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kinnylee.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dmp文件读取（一）</title>
      <link>https://kinnylee.github.io/post/breakpad/breekpad-dmp-01/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/breekpad-dmp-01/</guid>
      <description>dmp文件解析 dmp读取源码分析（一） 1. 入口文件： src/processor/minidump_stackwalk.cc 文件 main函数
1int main(int argc, char **argv) { 2 ... 3 // 解析参数 4 ... 5 // dmp分析的核心函数 6 PrintMinidumpProcess(...) 7 ... 8} 2. 总体流程： Minidump对象用于保存dmp文件流内容，核心代码
1PrintMinidumpProcess(...) { 2 ... 3 // 第一步：读取dmp文件内容 4 Minidump dump(minidump_file); 5 if (!dump.Read()) { 6 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Minidump &amp;#34; &amp;lt;&amp;lt; dump.path() &amp;lt;&amp;lt; &amp;#34; could not be read&amp;#34;; 7 return false; 8 } 9 10 // 第二步：开始分析dmp 11 minidump_processor.Process(&amp;amp;dump, &amp;amp;process_state) 12 13 // 第三步：打印分析结果 14 PrintProcessState(.</description>
    </item>
    
    <item>
      <title>dmp文件读取（二）</title>
      <link>https://kinnylee.github.io/post/breakpad/breekpad-dmp-02/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/breekpad-dmp-02/</guid>
      <description>dmp文件解析 dmp文件读取（二） 前面的章节一直提到，dmp中有很多中不同的stream，分别代表不同维度的信息，比如：操作系统信息、线程信息、异常信息、模块信息等。
breakpad中的流的表示 枚举类 MDStreamType 表示所有的流，源码位置：src/google_breakpad/common/minidump_format.h
1typedef enum { 2 MD_UNUSED_STREAM = 0, 3 MD_RESERVED_STREAM_0 = 1, 4 MD_RESERVED_STREAM_1 = 2, 5 MD_THREAD_LIST_STREAM = 3, /* MDRawThreadList */ 6 MD_MODULE_LIST_STREAM = 4, /* MDRawModuleList */ 7 MD_MEMORY_LIST_STREAM = 5, /* MDRawMemoryList */ 8 MD_EXCEPTION_STREAM = 6, /* MDRawExceptionStream */ 9 MD_SYSTEM_INFO_STREAM = 7, /* MDRawSystemInfo */ 10 MD_THREAD_EX_LIST_STREAM = 8, 11 MD_MEMORY_64_LIST_STREAM = 9, 12 MD_COMMENT_STREAM_A = 10, 13 MD_COMMENT_STREAM_W = 11, 14 MD_HANDLE_DATA_STREAM = 12, 15 MD_FUNCTION_TABLE_STREAM = 13, 16 MD_UNLOADED_MODULE_LIST_STREAM = 14, 17 MD_MISC_INFO_STREAM = 15, /* MDRawMiscInfo */ 18 MD_MEMORY_INFO_LIST_STREAM = 16, /* MDRawMemoryInfoList */ 19 MD_THREAD_INFO_LIST_STREAM = 17, 20 MD_HANDLE_OPERATION_LIST_STREAM = 18, 21 MD_TOKEN_STREAM = 19, 22 MD_JAVASCRIPT_DATA_STREAM = 20, 23 MD_SYSTEM_MEMORY_INFO_STREAM = 21, 24 MD_PROCESS_VM_COUNTERS_STREAM = 22, 25 MD_LAST_RESERVED_STREAM = 0x0000ffff, 26 27 /* Breakpad extension types.</description>
    </item>
    
  </channel>
</rss>
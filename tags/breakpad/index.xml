<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>breakpad on kinnylee</title>
    <link>https://kinnylee.github.io/tags/breakpad/</link>
    <description>Recent content in breakpad on kinnylee</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020; all rights reserved.</copyright>
    <lastBuildDate>Sun, 16 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kinnylee.github.io/tags/breakpad/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dmp文件读取（五）- Memory</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%94-memory/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%94-memory/</guid>
      <description>dmp文件读取（五） dmp文件中包含各种stream，前面已经介绍完线程、模块、异常这三种stream的读取，本章介绍另外一个很重要的stream：memory stream
Memory Stream概述  Memory Stream记录了进程崩溃时的内存信息 dmp中memory列表的stream类型为MD_MEMORY_LIST_STREAM，枚举值是5 memory分为很多的区域（region），每个区域使用MinidumpMemoryRegion对象表示  Memory Stream读取入口  dump的GetMemoryList方法，获取dmp文件中的内存信息 读取的模块列表信息保存在MinidumpMemoryList中 所有内存信息会建立索引，保存在range_map_中 range_map_是一个范围map类型，breakpad中定义的，后续查询时，只要给定一个内存地址，能快速定位到属于哪个内存region  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 ... 4 // 内存信息读取入口 5 MinidumpMemoryList *memory_list = dump-&amp;gt;GetMemoryList(); 6 ... 7} MinidumpMemoryList 1class MinidumpMemoryList : public MinidumpStream { 2 public: 3 // Sequential access to memory regions. 4 MinidumpMemoryRegion* GetMemoryRegionAtIndex(unsigned int index); 5 6 // Random access to memory regions. Returns the region encompassing 7 // the address identified by address.</description>
    </item>
    
    <item>
      <title>breakpad概述</title>
      <link>https://kinnylee.github.io/post/breakpad/breakpad%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/breakpad%E6%A6%82%E8%BF%B0/</guid>
      <description>breakpad是什么  google开源的一套实现崩溃报告系统的客户端和服务端组件 C++语言实现 现在已经被广泛运用在google的一系列产品及其它公司的桌面程序上，如chrome，piscal，firefox等。 github地址 官方网站  功能特性  崩溃转储 崩溃分析 跨平台：windows、mac、linux 可以运行于一系列架构的cpu上  主要组件  client：集成到应用程序源码中，用于抓取崩溃信息，并生成minidmp文件 symbol dumper：读取编译器生成的调试信息（pdb），生成symbol文件 processor：读取minidump文件，并结合symbol文件，生成可读的堆栈调用信息  各组件关系示意图 工作原理图 崩溃转储文件 coredump文件  Coredump叫做核心转储，它是进程运行时在突然崩溃的那一刻的一个内存快照。 linux内核提供的功能 操作系统在程序发生异常而异常在进程内部又没有被捕获的情况下，会把进程此刻内存、寄存器状态、运行堆栈等信息转储保存在一个文件里  coredump生成的条件  条件一：需要有信号产生：进程中止前肯定有信号产生，内核根据信号类型来决定是否产生core文件 条件二：需要编译器支持：需要把当前进程镜像以某种格式dump到文件中，比如：gcc/g++的-g选型 条件三：环境参数支持：  通过 ulimit –a 查看 core file size 是否为 0 ，如果为 0 则不能产生 core 文件。 通过 ulimit –c unlimited 可以系统能支持的产生足够大的 core 文件，也可以设置为具体值    coredump的局限性  文件巨大，不利于保存和传输 有些情况崩溃导致堆栈被破坏，堆栈信息不准确 一些信号导致崩溃，不会产生core文件 不能实时产生崩溃文件，必须进程终止时  minidump文件  minidump文件格式是由微软开发的用于崩溃上传  各个组件详解 client  client模块作为一个静态库将会与使用者的程序编译在一块 它的主要作用是在程序崩溃后，接管程序的异常处理 主要做了两方面的事情:  响应程序崩溃时接收到的signal 获取程序崩溃那一刻的运行时信息，保存为一个minidump格式的文件   内部原理：  崩溃时线程可以异常了，通过克隆子进程，并通过ptrace与父进程交互，读取相关信息 有两种异常处理模式：进程内、进程外    symbole dumper  从可执行程序中提取与符号相关的信息，并保存为一种特定格式的文件 symbol file中全部内容都是ascii文本。 symbol file的内容以行单位，每一行称作一条记录，每条记录中有多个字段，每个字段以空格分开 每条记录的开头是一个串字符，这个字符标记这条记录是什么类型的记录。（Line record除外，这种类型的记录，默认省略掉标记符） 记录中有些字段是10进制或16进制的字符串，16进制也没有以0x开头，要分清某个数字具体是哪种进制，就要看这些数字是在哪种记录里，属于哪个字段，这些都是规定死了的  symbole文件格式 官方文档</description>
    </item>
    
    <item>
      <title>dmp文件读取（四）- Exception</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%9B%9B-exception/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%9B%9B-exception/</guid>
      <description>dmp文件读取（四） 前面两篇文章，已经把分析dmp所需要的准备工作：线程信息、模块信息的读取都分析完了。今天该崩溃的主角出场：异常(Exception) Stream的读取
Exception Stream概述  Exception Stream记录了进程崩溃时，崩溃现场的基本信息 崩溃信息包括：  崩溃时的线程id 异常状态码 异常标识 异常的内存地址 寄存器信息 其他信息   以上信息都保存在MDRawExceptionStream中  Exception Stream读取入口  dump的GetException方法，获取dmp文件中的崩溃信息 读取的模块列表信息保存在MinidumpException中  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 ... 4 // 异常信息读取入口 5 MinidumpException *exception = dump-&amp;gt;GetException(); 6 ... 7} MinidumpException  Exception Stream的类型为MD_EXCEPTION_STREAM 存储在dmp文件中的exectpion信息，反序列化之后保存为MDRawExceptionStream对象  1class MinidumpException : public MinidumpStream { 2 public: 3 virtual ~MinidumpException(); 4 5 const MDRawExceptionStream* exception() const { 6 return valid_ ?</description>
    </item>
    
    <item>
      <title>dmp文件读取（三）- Moduel</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%89-moduel/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%89-moduel/</guid>
      <description>dmp文件读取（三） 第二章主要介绍了dmp中线程stream的读取，线程信息包括进程运行时的所有线程，每个线程包括线程id、优先级、调用栈、寄存器等上下文信息。这些信息是后面分析调用栈的核心参考。本节主要介绍模块stream信息。
module stream概述  module信息记录了应用程序（exe）在运行时，加载了哪些dll 每个dll相关的信息，在dmp中称为module dmp中module列表的stream类型为MD_MODULE_LIST_STREAM，枚举值是4 每个module使用MinidumpModule对象表示 每个module在内存中占用一段位置，dmp分析时，根据线程的崩溃地址，匹配响应的模块内存地址  module流读取入口  dump的GetModuleList方法，获取dmp文件中的模块列表 读取的模块列表信息保存在MinidumpModuleList中  1ProcessResult MinidumpProcessor::Process( 2 Minidump *dump, ProcessState *process_state) { 3 4 ... 5 // 读取模块信息 6 MinidumpModuleList *module_list = dump-&amp;gt;GetModuleList(); 7 ... 8} MinidumpModuleList 1class MinidumpModuleList : public MinidumpStream, 2 public CodeModules { 3 public: 4 ... 5 private: 6 friend class Minidump; 7 8 // 存放所有的module列表 9 // 每个module使用MinidumpModule对象表示 10 typedef vector&amp;lt;MinidumpModule&amp;gt; MinidumpModules; 11 12 // module的stream类型为MD_MODULE_LIST_STREAM 13 static const uint32_t kStreamType = MD_MODULE_LIST_STREAM; 14 15 // 重新read方法，读取module信息 16 bool Read(uint32_t expected_size); 17 18 // 最大模块数1024 19 // The largest number of modules that will be read from a minidump.</description>
    </item>
    
    <item>
      <title>dmp文件读取（二）- Thread</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%8C-thread/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%BA%8C-thread/</guid>
      <description>dmp文件解析 dmp文件读取（二） 前面的章节一直提到，dmp中有很多中不同的stream，分别代表不同维度的信息，比如：操作系统信息、线程信息、异常信息、模块信息等。
breakpad中的流的表示 枚举类 MDStreamType 表示所有的流，源码位置：src/google_breakpad/common/minidump_format.h
1typedef enum { 2 MD_UNUSED_STREAM = 0, 3 MD_RESERVED_STREAM_0 = 1, 4 MD_RESERVED_STREAM_1 = 2, 5 MD_THREAD_LIST_STREAM = 3, /* MDRawThreadList */ 6 MD_MODULE_LIST_STREAM = 4, /* MDRawModuleList */ 7 MD_MEMORY_LIST_STREAM = 5, /* MDRawMemoryList */ 8 MD_EXCEPTION_STREAM = 6, /* MDRawExceptionStream */ 9 MD_SYSTEM_INFO_STREAM = 7, /* MDRawSystemInfo */ 10 MD_THREAD_EX_LIST_STREAM = 8, 11 MD_MEMORY_64_LIST_STREAM = 9, 12 MD_COMMENT_STREAM_A = 10, 13 MD_COMMENT_STREAM_W = 11, 14 MD_HANDLE_DATA_STREAM = 12, 15 MD_FUNCTION_TABLE_STREAM = 13, 16 MD_UNLOADED_MODULE_LIST_STREAM = 14, 17 MD_MISC_INFO_STREAM = 15, /* MDRawMiscInfo */ 18 MD_MEMORY_INFO_LIST_STREAM = 16, /* MDRawMemoryInfoList */ 19 MD_THREAD_INFO_LIST_STREAM = 17, 20 MD_HANDLE_OPERATION_LIST_STREAM = 18, 21 MD_TOKEN_STREAM = 19, 22 MD_JAVASCRIPT_DATA_STREAM = 20, 23 MD_SYSTEM_MEMORY_INFO_STREAM = 21, 24 MD_PROCESS_VM_COUNTERS_STREAM = 22, 25 MD_LAST_RESERVED_STREAM = 0x0000ffff, 26 27 /* Breakpad extension types.</description>
    </item>
    
    <item>
      <title>dmp文件读取（一）- 概述</title>
      <link>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%80-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kinnylee.github.io/post/breakpad/dmp%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%80-%E6%A6%82%E8%BF%B0/</guid>
      <description>dmp文件解析 dmp读取源码分析（一） 1. 入口文件： src/processor/minidump_stackwalk.cc 文件 main函数
1int main(int argc, char **argv) { 2 ... 3 // 解析参数 4 ... 5 // dmp分析的核心函数 6 PrintMinidumpProcess(...) 7 ... 8} 2. 总体流程： Minidump对象用于保存dmp文件流内容，核心代码
1PrintMinidumpProcess(...) { 2 ... 3 // 第一步：读取dmp文件内容 4 Minidump dump(minidump_file); 5 if (!dump.Read()) { 6 BPLOG(ERROR) &amp;lt;&amp;lt; &amp;#34;Minidump &amp;#34; &amp;lt;&amp;lt; dump.path() &amp;lt;&amp;lt; &amp;#34; could not be read&amp;#34;; 7 return false; 8 } 9 10 // 第二步：开始分析dmp 11 minidump_processor.Process(&amp;amp;dump, &amp;amp;process_state) 12 13 // 第三步：打印分析结果 14 PrintProcessState(.</description>
    </item>
    
  </channel>
</rss>